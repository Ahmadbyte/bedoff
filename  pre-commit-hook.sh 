
#!/bin/bash

# Git pre-commit hook
#####################

# Terminal output formatting stuff

MIN_COVERAGE=95

# Check, if any changes have been made

changes_count=$(git diff --cached | wc -l)


if [ "$changes_count" -ne "0" ]; then

    ########################################################################
    # Run code style check

    old_stash=$(git rev-parse -q --verify refs/stash)
    git stash save -q --keep-index
    new_stash=$(git rev-parse -q --verify refs/stash)
    echo
    echo "$(tput setaf 6)$(tput bold)Checking your code against the PEP8 style guide to ensure code quality..$(tput sgr 0)"

    modified_files=$(git diff --cached --name-status | grep -v ^D | awk '$1 $2 { print $2}' | grep -e .py$)
    if [ -n "$modified_files" ]; then
        flake8 $modified_files --max-line-length=140
    fi

    code=$?

    if [ "$code" -eq "0" ]; then
        echo
        echo -e "$(tput setaf 2)$(tput bold)Code quality looks fine.. $(tput sgr 0)"
        echo
        echo
        echo
    else
        echo
        echo "$(tput setaf 1)$(tput bold)Your changes violate PEP8 conventions! Please fix these and then push. $(tput sgr 0)"
        echo
        git stash pop -q
        exit $code
    fi;

    ########################################################################
    # Check proper ordering of imports

    echo "$(tput setaf 6)$(tput bold)Checking if all imports are ordered properly..$(tput sgr 0)"

    modified_files=$(git diff --cached --name-status | grep -v ^D | awk '$1 $2 { print $2}' | grep -e .py$)
    if [ -n "$modified_files" ]; then
        isort -c $modified_files
    fi

    code=$?

    if [ "$code" -eq "0" ]; then
        echo
        echo -e "$(tput setaf 2)$(tput bold)Imports are ordered properly, continuing.. $(tput sgr 0)"
        echo
        echo
        echo
    else
        echo
        echo "$(tput setaf 1)$(tput bold)Imports are not ordered correctly! Please fix these and then push. $(tput sgr 0)"
        echo
        git stash pop -q
        exit $code
    fi;

    ########################################################################
    # Check for stray print statements or PDBs

    echo "$(tput setaf 6)$(tput bold)Checking for stray PDB imports or print statements..$(tput sgr 0)"

    modified_files=$(git diff --cached --name-status | grep -v ^D | awk '$1 $2 { print $2}' | grep -e .py$)
    code=$?
    if [ -n "$modified_files" ]; then
        output=$(grep -HIrn --color=always 'print(\|import pdb\|set_trace' $modified_files | grep -v --color=always '# noqa')
        code=$?
    fi

    code=$((1 - $code))

    if [ "$code" -eq "0" ]; then
        echo
        echo -e "$(tput setaf 2)$(tput bold)No PDB imports or print statements found, great job! Continuing.. $(tput sgr 0)"
        echo
        echo
        echo
        sleep 1.5
    else
        echo
        echo "$(tput setaf 1)$(tput bold)You missed the following lines which should NOT be committed! Please verify and commit again.. $(tput sgr 0)"
        echo
        echo "$output"
        echo
        git stash pop -q
        exit 1
    fi;



    # ########################################################################
    # Run tests

    # if [ "$old_stash" != "$new_stash" ]; then

    #     echo "$(tput setaf 6)$(tput bold)Running all unit tests..$(tput sgr 0)"
    #     pytest --maxfail=1 --cov-fail-under=$((MIN_COVERAGE)) --cov=. > /dev/null 2>&1
    #     code=$?

    #     if [ "$code" -eq "0" ]; then
    #         echo
    #         echo -e "$(tput setaf 2)$(tput bold)All unit tests passed. Continuing.. $(tput sgr 0)"
    #         echo
    #     else
    #         echo
    #         echo -e "$(tput setaf 1)$(tput bold)Your changes broke some unit tests, or code coverage dropped below $MIN_COVERAGE%! Please fix this and then push. $(tput sgr 0)"
    #     fi;


    #     if [ "$code" -ne "0" ]; then
    #         git stash pop -q
    #         exit $code
    #     fi;

    # else
    #     echo -e "$(tput setaf 2)$(tput bold)No changes to test. Continuing.. $(tput sgr 0)"
    #     exit 0
    # fi


    git stash pop -q

fi;